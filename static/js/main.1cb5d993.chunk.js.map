{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","alt","poster","react_default","a","createElement","src","title","MovieGenre","_ref3","genre","className","MovieSynopsis","_ref4","text","synopsis","lib_default","maxLine","ellipsis","Movie","_ref","genres","map","index","key","App","state","_renderMovies","_this","movies","movie","src_Movie_0","id","medium_cover_image","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","res","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAwBA,SAASA,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,IAAKC,EAAUF,EAAVE,OACxB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAQD,IAAKA,EAAKM,MAAON,IAI3C,SAASO,EAATC,GAA+B,IAATC,EAASD,EAATC,MAClB,OACIP,EAAAC,EAAAC,cAAA,QAAMM,UAAU,SAASD,EAAzB,MAIR,SAASE,EAATC,GAAqC,IAC7BC,EAD6BD,EAAZE,SAErB,OACIZ,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CACIO,UAAU,WACVG,KAAMA,EACNG,QAAQ,IACRC,SAAS,QAMNC,MA5CH,SAAAC,GAA+C,IAAnCb,EAAmCa,EAAnCb,MAAOL,EAA4BkB,EAA5BlB,OAAQmB,EAAoBD,EAApBC,OAAQN,EAAYK,EAAZL,SAE3C,OACIZ,EAAAC,EAAAC,cAAA,UAAQM,UAAU,SACdR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,iBACXR,EAAAC,EAAAC,cAACN,EAAD,CAAaE,IAAKM,EAAOL,OAAQA,KAErCC,EAAAC,EAAAC,cAAA,kBACIF,EAAAC,EAAAC,cAAA,UAAKE,GACJc,EAAOC,IAAI,SAACZ,EAAOa,GAChB,OAAQpB,EAAAC,EAAAC,cAACG,EAAD,CAAYE,MAAOA,EAAOc,IAAKD,MAG3CpB,EAAAC,EAAAC,cAACO,EAAD,CAAeG,SAAUA,OC8D1BU,6MAlDXC,MAAQ,KAORC,cAAgB,WAUZ,OATeC,EAAKF,MAAMG,OAAOP,IAAI,SAACQ,GAClC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CACHP,IAAKM,EAAME,GACXzB,MAAOuB,EAAMvB,MACbL,OAAQ4B,EAAMG,mBACdZ,OAAQS,EAAMT,OACdN,SAAUe,EAAMf,gBAM5BmB,gCAAa,SAAAC,IAAA,IAAAN,EAAA,OAAAO,EAAAhC,EAAAiC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACYZ,EAAKa,WADjB,OACHZ,EADGS,EAAAI,KAETd,EAAKe,SAAS,CACVd,WAHK,wBAAAS,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WACP,OAAOK,MAAM,6DACRC,KAAK,SAAAC,GAAG,OACLA,EAAIC,SAEPF,KAAK,SAAAE,GAAI,OACNA,EAAKC,KAAKrB,SAEbsB,MAAM,SAACC,GACJC,QAAQC,IAAIF,yFAhCpBP,KAAKX,8CAqCL,OAEI/B,EAAAC,EAAAC,cAAA,OAAKM,UAAWkC,KAAKnB,MAAMG,OAAS,MAAQ,gBACtCgB,KAAKnB,MAAMG,OAAUgB,KAAKlB,gBAAkB,kBAlE5C4B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.1cb5d993.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n\r\n\r\nvar Movie = function ({ title, poster, genres, synopsis }) {\r\n\r\n    return (\r\n        <figure className=\"Movie\">\r\n            <div className=\"Movie_Columns\">\r\n                <MoviePoster alt={title} poster={poster} />\r\n            </div>\r\n            <figcaption>\r\n                <h2>{title}</h2>\r\n                {genres.map((genre, index) => {\r\n                    return (<MovieGenre genre={genre} key={index}></MovieGenre>\r\n                    )\r\n                })}\r\n                <MovieSynopsis synopsis={synopsis}></MovieSynopsis>\r\n            </figcaption>\r\n        </figure>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({ alt, poster }) {\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} />\r\n    )\r\n}\r\n\r\nfunction MovieGenre({ genre }) {\r\n    return (\r\n        <span className=\"Genre\">{genre}, </span>\r\n    )\r\n}\r\n\r\nfunction MovieSynopsis({ synopsis }) {\r\n    var text = synopsis;\r\n    return (\r\n        <LinesEllipsis\r\n            className=\"Synopsis\"\r\n            text={text}\r\n            maxLine='5'\r\n            ellipsis='...'\r\n        />\r\n\r\n    )\r\n}\r\n\r\nexport default Movie\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n// import PropTypes from 'prop-types';\r\nimport Movie from './Movie';\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n    // static propTypes = {\r\n    //     title: PropTypes.string,\r\n    //     poster: PropTypes.string\r\n    // }\r\n\r\n    // Render : ComponentWillMount() -> render() ->componentDidMount()\r\n\r\n    // Update componentWillReceiveProps() //props를 받음\r\n    // -> shouldComponentUpdate() ===true 이전과 props가 다르면 \r\n    // -> componentWillUpdate()            ex)spinner 빙글빙글 로딩중... \r\n    // -> render() -> componentDidUpdate()    \r\n\r\n    // componentWillMount() {\r\n    //     console.log('will mount')\r\n    // }\r\n\r\n    // componentDidMount() {\r\n    //     console.log('did mount')\r\n    // }\r\n\r\n    state = {\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._getMovies();\r\n    }\r\n\r\n    _renderMovies = () => {  //내가만든함수는 _를 사용  ,  유저 정의메서드와 네이티브 구분하기위해 사용\r\n        const movies = this.state.movies.map((movie) => {\r\n            return <Movie\r\n                key={movie.id}\r\n                title={movie.title}\r\n                poster={movie.medium_cover_image}\r\n                genres={movie.genres}\r\n                synopsis={movie.synopsis}\r\n            />\r\n        })\r\n        return movies\r\n    }\r\n\r\n    _getMovies = async () => {\r\n        const movies = await this._callApi() //await 작업이 완료되기까지는 실행안됨. 동기적\r\n        this.setState({ //위에 await 후 실행\r\n            movies\r\n        })\r\n    }\r\n\r\n    _callApi = () => {\r\n        return fetch('https://yts.am/api/v2/list_movies.json?sort_by=like_count')\r\n            .then(res =>\r\n                res.json()\r\n            )\r\n            .then(json =>\r\n                json.data.movies\r\n            )\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n    render() {\r\n        // console.log('did render')\r\n        return (\r\n\r\n            <div className={this.state.movies ? \"App\" : \"App--loading\"}>\r\n                {(this.state.movies) ? this._renderMovies() : 'Loading'}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}